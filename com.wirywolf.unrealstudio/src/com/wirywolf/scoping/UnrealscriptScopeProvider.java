/*
 * generated by Xtext
 */
package com.wirywolf.scoping;

import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import com.wirywolf.typing.UnrealscriptTypeSystem;
import com.wirywolf.unrealscript.DeclaredVariable;
import com.wirywolf.unrealscript.DefaultProperty;
import com.wirywolf.unrealscript.DefaultPropertyIdentifier;
import com.wirywolf.unrealscript.FunctionArg;
import com.wirywolf.unrealscript.FunctionBody;
import com.wirywolf.unrealscript.FunctionCallType;
import com.wirywolf.unrealscript.FunctionDeclaration;
import com.wirywolf.unrealscript.LocalDeclaration;
import com.wirywolf.unrealscript.Model;
import com.wirywolf.unrealscript.QualifiedIdentifier;
import com.wirywolf.unrealscript.StructDeclaration;
import com.wirywolf.unrealscript.StructDefaultPropertiesBlock;
import com.wirywolf.unrealscript.VarDeclaration;
import com.wirywolf.unrealscript.VarName;
import com.wirywolf.unrealscript.VarType;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class UnrealscriptScopeProvider extends AbstractDeclarativeScopeProvider 
{
	UnrealscriptTypeSystem typeSystem = new UnrealscriptTypeSystem();
	AuxiliaryFunctions auxFunctions = new AuxiliaryFunctions();
	
	/**
	 * Returns a scope for the given context. The scope provides access to the compatible
	 * visible EObjects for a given reference.
	 *
	 * @param context the element from which an element shall be referenced
	 * @param reference the reference to be used to filter the elements.
	 * @return {@link IScope} representing the inner most {@link IScope} for the
	 *         passed context and reference. Note for implementors: The result may not be <code>null</code>.
	 *         Return <code>IScope.NULLSCOPE</code> instead.
	 */
	
	@Override
	public IScope getScope(EObject context, EReference reference)
	{
		return super.getScope(context, reference);
	}
	
	public IScope scope_VarDeclaration_type(VarDeclaration context, EReference ref)
	{
		return null;
	}
	
	public IScope scope_QualifiedIdentifier_child(QualifiedIdentifier context, EReference ref)
	{
		EObject parent;
		IScope localScope = IScope.NULLSCOPE, argScope = IScope.NULLSCOPE, globalScope = IScope.NULLSCOPE;
		
		if (context.getReceiver() == null)
		{
			parent = context;
			// first parent variable
			while (parent.eContainer() != null)
			{
				parent = parent.eContainer();
				if (parent instanceof FunctionBody)
				{
					FunctionBody fb = (FunctionBody)parent;
					List<LocalDeclaration> localDeclarations = fb.getLocalDeclarations();
					List<FunctionArg> functionArgs = ((FunctionDeclaration)(fb.eContainer())).getFunctionArgList();
					List<VarName> localVarNames = new LinkedList<VarName>();
					
					for (LocalDeclaration ld: localDeclarations)
					{
						localVarNames.addAll(ld.getVarDeclaration().getVarNames());
					}
					globalScope = getGlobalScope(context, ref);
					localScope = new SimpleScope(globalScope, Scopes.scopedElementsFor(localVarNames), true);
					argScope = new SimpleScope(localScope, Scopes.scopedElementsFor(functionArgs), true);
					break;
				}
				else if (parent instanceof FunctionDeclaration)
				{
					FunctionDeclaration fd = (FunctionDeclaration)parent;
					globalScope = getGlobalScope(context, ref);
					argScope = new SimpleScope(globalScope, Scopes.scopedElementsFor(fd.getFunctionArgList()));
					break;
				}
				else if (parent instanceof DefaultPropertyIdentifier)
				{
					if (parent.eContainer().eContainer() instanceof DefaultProperty)
					{
						DefaultProperty dp = (DefaultProperty)(parent.eContainer().eContainer());
						DefaultPropertyIdentifier dpi = dp.getDefaultPropertyIdentifier();
						QualifiedIdentifier qi = dpi.getDefaultPropertyName();
			
						parent = qi.getChild();

						if (parent != null)
						{
							if (parent instanceof DeclaredVariable)
							{
								DeclaredVariable dvar = (DeclaredVariable)parent;
								argScope = getFieldScopeFor(dvar, dpi.isArray());
							}
							else
							{
								System.out.println("Parent = " + parent);
							}
						}
					}
					else
					{
						if (parent.eContainer().eContainer() instanceof StructDefaultPropertiesBlock)
						{
							StructDeclaration sd = (StructDeclaration)(parent.eContainer().eContainer().eContainer());
							argScope = auxFunctions.getStructDeclarationFieldScope(sd);
						}
						else
						{
							argScope = new SimpleScope(getGlobalScope(context, ref), 
									Scopes.scopedElementsFor(new LinkedList<VarName>()), true);
						}
					}
					break;
				}
			}
		}
		else
		{
			QualifiedIdentifier qi = context.getReceiver();
			boolean isArray = qi.isArray();
			parent = qi.getChild();

			if (parent != null)
			{
				if (parent instanceof DeclaredVariable)
				{
					DeclaredVariable dvar = (DeclaredVariable)parent;
					argScope = getFieldScopeFor(dvar, isArray);
				}
				else
				{
					System.out.println("Parent = " + parent);
				}
			}
		}
		return argScope;
	}

//	public IScope scope_DefaultPropertyIdentifier_defaultPropertyName(DefaultPropertyIdentifier context, EReference ref)
//	{
//		EObject parent = context.eContainer().eContainer();
//		IScope scope = null;
//		
//		if (parent instanceof DefaultProperty)
//		{
//			DefaultProperty dp = (DefaultProperty)parent;
//			DefaultPropertyIdentifier dpi = dp.getDefaultPropertyIdentifier();
//			DeclaredVariable dv = dpi.getDefaultPropertyName();
//			
//			boolean isTemplate = dpi.isIsArray();
//			
//			scope = getFieldScopeFor(dv, isTemplate);
//		}
//		
//		return scope;
//	}
	
	public IScope scope_FunctionCallType_functionName(QualifiedIdentifier sel, EReference ref)
	{
		EObject parent = sel.getReceiver();
		if (parent != null)
		{
			DeclaredVariable dvar = (DeclaredVariable)parent;
			if (dvar != null)
			{
				return getMethodScopeFor(dvar);
			}
		}
		return Scopes.scopeFor(new LinkedList<FunctionCallType>());
	}
	
	public IScope getFieldScopeFor(DeclaredVariable dvar)
	{
		if (dvar instanceof VarName)
		{
			VarDeclaration vd = (VarDeclaration)dvar.eContainer();
			VarType vt = vd.getType();

			return auxFunctions.getVarTypeFieldScope(vt);
		}
		else if (dvar instanceof FunctionArg)
		{
			FunctionArg fa = (FunctionArg)dvar;
			VarType vt = fa.getType();

			return auxFunctions.getVarTypeFieldScope(vt);
		}
		
		return IScope.NULLSCOPE;
	}
	
	public IScope getFieldScopeFor(DeclaredVariable dvar, boolean bUseTemplateType)
	{
		if (bUseTemplateType == false)
			return getFieldScopeFor(dvar);
		
		if (dvar instanceof VarName)
		{
			VarDeclaration vd = (VarDeclaration)dvar.eContainer();
			VarType vt = vd.getTemplateType();

			return auxFunctions.getVarTypeFieldScope(vt);
		}
		else if (dvar instanceof FunctionArg)
		{
			FunctionArg fa = (FunctionArg)dvar;
			VarType vt = fa.getTemplateType();

			return auxFunctions.getVarTypeFieldScope(vt);
		}
		
		return IScope.NULLSCOPE;
	}
	
	public IScope getMethodScopeFor(DeclaredVariable dvar)
	{
		if (dvar instanceof VarName)
		{
			VarDeclaration vd = (VarDeclaration)dvar.eContainer();
			VarType vt = vd.getType();

			return auxFunctions.getMethodScope(vt);
		}
		else if (dvar instanceof FunctionArg)
		{
			FunctionArg fa = (FunctionArg)dvar;
			VarType vt = fa.getType();

			return auxFunctions.getMethodScope(vt);
		}
		
		return Scopes.scopeFor(new LinkedList<FunctionCallType>());
	}
	
	public IScope getGlobalScope(EObject context, EReference reference)
	{
		EObject parent = context;
		IScope scope = IScope.NULLSCOPE;
		
		while (parent.eContainer() != null)
		{
			parent = parent.eContainer();
			if (parent instanceof Model)
			{
				scope = getScope(parent, reference);
			}
		}
		
		return scope;
	}
}
