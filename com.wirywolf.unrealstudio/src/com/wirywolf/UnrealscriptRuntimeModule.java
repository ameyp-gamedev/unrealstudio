/*
 * generated by Xtext
 */
package com.wirywolf;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.ICaseInsensitivityHelper;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.DefaultGlobalScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class UnrealscriptRuntimeModule extends com.wirywolf.AbstractUnrealscriptRuntimeModule 
{
	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider()
	{
		return UnrealscriptQualifiedNameProvider.class;
	}
	
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider()
	{
		return DefaultGlobalScopeProvider.class;
	}
	
	public Class<? extends org.eclipse.xtext.parser.antlr.Lexer> bindLexer() {
		return com.wirywolf.parser.lexer.UnrealscriptLexer.class;
	}
	
	public void configureRuntimeLexer(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class).annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.parser.antlr.LexerBindings.RUNTIME)).to(com.wirywolf.parser.lexer.UnrealscriptLexer.class);
	}
	
//	public com.google.inject.Provider<com.wirywolf.parser.antlr.lexer.InternalUnrealscriptLexer> provideInternalUnrealscriptLexer() {
//		return org.eclipse.xtext.parser.antlr.LexerProvider.create(com.wirywolf.parser.antlr.lexer.InternalUnrealscriptLexer.class);
//	}
	
	@Override
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder)
	{
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).
		annotatedWith(com.google.inject.name.Names.named(
			"org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate")
			).to(com.wirywolf.scoping.UnrealscriptImportedNamespaceAwareLocalScopeProvider.class);
	}
	
	public void configureIgnoreCaseLinking(com.google.inject.Binder binder) 
	{
		binder.bindConstant().annotatedWith(org.eclipse.xtext.scoping.IgnoreCaseLinking.class).to(true);
	}

	public ICaseInsensitivityHelper bindCaseInsensitivityHelper() {
		return new ICaseInsensitivityHelper() {
			public boolean isIgnoreCase(EReference reference) {
				return true;
			}
		};
	}
}
